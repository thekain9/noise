/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: polyman (https://sketchfab.com/Polyman_3D)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/apple-iphone-15-pro-max-black-df17520841214c1792fb8a44c6783ee7
Title: Apple iPhone 15 Pro Max Black
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import * as THREE from 'three'

// Define the Model component, which takes props as its argument
function Model(props) {
  const { nodes, materials } = useGLTF('/models/scene.glb')
  const texture = useTexture(props.item.img);
  const leatherNormalMap = useTexture('/assets/textures/leather_white_nor_gl_2k.jpg')

  // Use the useEffect hook to run some code whenever 'materials' or 'props.item' changes
  useEffect(() => {
    Object.entries(materials).forEach(([name, material]) => {
      
      // Apply color to non-excluded materials
      if (name !== 'cushion') {
        material.color = new THREE.Color(props.item.color[0]);
      }

      // Apply a metallic finish to the OutterHeadBand and Joint parts
      if (name === 'Material.010' || name === 'Material.001' || name === 'Material'
    || name === 'L' || name === 'Material.007' || name === 'Material.002'
    || name === 'R') {
        material.metalness = 1.0; // Full metallic effect
        material.roughness = 0.4; // Moderate roughness for some shine
      }

      // Apply a leathery finish to the HeadBand
      if (name === 'cushion') {
        material.metalness = 0.1; // Low metalness for a more leathery feel
        material.roughness = 0.8; // High roughness for a soft, less reflective surface
        material.normalMap = leatherNormalMap; // Apply the normal map to the cushion material
        material.normalScale = new THREE.Vector2(.1, .1); 
      }

      material.needsUpdate = true;
    });
  }, [materials, props.item, leatherNormalMap]);



  //Code below autogenerated.
  return (
    <group {...props} dispose={null}>
      <group position={[0.026, 0.904, 0]} rotation={[Math.PI, 0, Math.PI]} scale={2.423}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.aux.geometry}
          material={materials['Material.002']}
          position={[0.645, -0.877, 0]}
          rotation={[0, 0, -0.381]}
          scale={0.655}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.charger.geometry}
          material={materials['Material.007']}
          position={[-0.657, -0.901, 0]}
          rotation={[0, 0, 0.357]}
          scale={[0.008, 0.022, 0.022]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.EarCup.geometry}
          material={materials.cushion}
          position={[0.864, -0.593, 0]}
          rotation={[0, 0, -0.326]}
          scale={0.413}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.EarPiece001.geometry}
          material={materials.Material}
          position={[0.861, -0.592, 0]}
          rotation={[0, 0, -0.326]}
          scale={0.413}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Hedband.geometry}
          material={materials.cushion}
          position={[-0.011, -0.49, 0.001]}
          scale={[0.413, 0.414, 0.414]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Joint.geometry}
          material={materials['Material.001']}
          position={[0.859, -0.591, 0]}
          rotation={[0, 0, -0.326]}
          scale={0.413}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.L.geometry}
          material={materials.L}
          position={[0.921, 0.056, 0.001]}
          rotation={[0, -0.024, -0.075]}
          scale={[0.011, 0.044, 0.069]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Left_mesh.geometry}
          material={materials.newmesh}
          position={[0.861, -0.592, 0]}
          rotation={[0, 0, -0.326]}
          scale={0.413}
        />
        <group
          position={[0.921, 0.056, 0.001]}
          rotation={[0, -0.024, -0.075]}
          scale={[0.011, 0.044, 0.069]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube003.geometry}
            material={materials['Material.005']}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube003_1.geometry}
            material={materials['Material.004']}
          />
        </group>
        <group
          position={[-0.938, 0.043, 0.001]}
          rotation={[0, -0.024, -0.075]}
          scale={[0.011, 0.044, 0.069]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube006.geometry}
            material={materials['Material.005']}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube006_1.geometry}
            material={materials['Material.004']}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.onoff.geometry}
          material={materials.Material}
          position={[-0.788, -0.918, 0]}
          rotation={[-0.026, 0, -2.39]}
          scale={[0.345, 0.408, 0.413]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.OutterHeadBand.geometry}
          material={materials['Material.010']}
          position={[-0.011, -0.49, -0.004]}
          scale={0.413}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.R.geometry}
          material={materials.R}
          position={[-0.93, 0.041, 0.001]}
          rotation={[0, -0.024, -0.075]}
          scale={[0.011, 0.044, 0.069]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Right_mesh.geometry}
          material={materials.newmesh}
          position={[0.861, -0.592, 0]}
          rotation={[0, 0, -0.326]}
          scale={0.413}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['Logo-1'].geometry}
        material={materials.LOGO}
        position={[2.32, -0.569, 0.022]}
        rotation={[1.554, -0.306, -1.583]}
        scale={0.902}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['Logo-1001'].geometry}
        material={materials['LOGO.002']}
        position={[-2.18, -0.536, 0.004]}
        rotation={[1.584, 0.328, 1.57]}
        scale={0.902}
      />
    </group>
  )
}

export default Model;

useGLTF.preload('/models/scene.glb')
